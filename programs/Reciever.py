from srnnDecrypt import decrypt
import socket
from _thread import *
import threading


myPublicKey = ( 6441632381245105102845303224299619627408379834705757629106109601077650394409978617762745713119887198951106421397380242029327232168914351161709979983086131 , 999 , 3152176747341179562568040467871303599712199674729307246465517672864835591185847393906885762816795807233578005550443470222927467856138299726959553714273847 )
myprivateKey = ( 3436826886089730750567113732283981242651317769667836652966522940314702362583015379333796264339456209931355580170031243240707828045728077691598893348298743 , 4053282080514000726349831063834831658728529131638783155142988910503388110932575699753291328169973403929428952556614239518830820699805112490276303800036198 , 2622458188390738571771791018986794271627323567853014283472081055914944002079244683642958540058089316678879311652045682113987892295504195286847718870496508 , 6441632381245105102845303224299619627408379834705757629106109601077650394409816817925820765619356010734379408236137358344215985399028798525154398602158432 )


server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_sock.bind(('127.0.0.10', 42069))
server_sock.listen(5)
print("Sender is waiting for messages!")

print_lock = threading.Lock()

def threaded(sock, addr):
    ct = str((sock.recv(4096)).decode("utf-8"))
    print("The received message is:",ct)
    if ct[:3] == "<#>":
        ct  = ct[3:]
        print(ct)
        message = decrypt(ct,myPublicKey,myprivateKey)
        print("The decoded message is:",message)
    else:
        print("This isn't encrypted")
    return 0

while True:
    client_sock, addr = server_sock.accept()
    start_new_thread(threaded,(client_sock,addr))


